<?php
# This file was automatically generated by the MediaWiki 1.17.0
# installer. If you make manual changes, please keep track in case you
# need to recreate them later.
#
# See includes/DefaultSettings.php for all configurable settings
# and their default values, but don't forget to make changes in _this_
# file, not there.
#
# Further documentation for configuration settings may be found at:
# http://www.mediawiki.org/wiki/Manual:Configuration_settings

# Protect against web entry
if ( !defined( 'MEDIAWIKI' ) ) {
	exit;
}

## Uncomment this to disable output compression
# $wgDisableOutputCompression = true;

$wgSitename      = "WikiVote";
$wgMetaNamespace = "WikiVote";

## The URL base path to the directory containing the wiki;
## defaults for all runtime URL paths are based off of this.
## For more information on customizing the URLs please see:
## http://www.mediawiki.org/wiki/Manual:Short_URL
$wgScriptPath = "";
$wgScriptExtension  = ".php";

## The relative URL path to the skins directory
$wgStylePath        = "$wgScriptPath/skins";
require_once "$IP/skins/Vector/Vector.php";

## The relative URL path to the logo.  Make sure you change this from the default,
## or else you'll overwrite your logo when you upgrade!
$wgLogo             = "$wgScriptPath/resources/assets/VRB_logo.png";

## UPO means: this is also a user preference option

$wgEnableEmail      = true;
$wgEnableUserEmail  = true; # UPO

$wgEmergencyContact = "info@votingrightsbrigade.org";
$wgPasswordSender   = "info@votingrightsbrigade.org";

$wgEnotifUserTalk      = true; # UPO
$wgEnotifWatchlist     = true; # UPO
$wgEmailAuthentication = true;

## Database settings
$wgDBtype           = "mysql";
$wgDBserver         = "localhost:3306";
$wgDBname           = "bitnami_mediawiki";
$wgDBuser           = "bn_mediawiki";
$wgDBpassword       = "4d4b64beb9";

# MySQL specific settings
$wgDBprefix         = "";

# MySQL table options to use during installation or update
$wgDBTableOptions   = "ENGINE=InnoDB, DEFAULT CHARSET=utf8";

# Experimental charset support for MySQL 4.1/5.0.
$wgDBmysql5 = false;

## Shared memory settings
$wgMainCacheType    = CACHE_NONE;
$wgMemCachedServers = array();

# Image Converter
$wgSVGConverter = 'ImageMagick';

# Image converter path
$wgSVGConverterPath = '/opt/bitnami/common/bin';

## To enable image uploads, make sure the 'images' directory
## is writable, then set this to true:
$wgEnableUploads  = true;
$wgUseImageMagick = true;
$wgImageMagickConvertCommand = "/opt/bitnami/common/bin/convert";

# Path to jpegtran utility
$wgJpegTran = '/opt/bitnami/common/bin/';

# Path to tidy utility binary
$wgTidyBin = '/opt/bitnami/common/bin/';

# InstantCommons allows wiki to use images from http://commons.wikimedia.org
$wgUseInstantCommons  = false;

## If you use ImageMagick (or any other shell command) on a
## Linux server, this will need to be set to the name of an
## available UTF-8 locale
$wgShellLocale = "en_US.utf8";

## If you want to use image uploads under safe mode,
## create the directories images/archive, images/thumb and
## images/temp, and make them all writable. Then uncomment
## this, if it's not already uncommented:
#$wgHashedUploadDirectory = false;

## If you have the appropriate support software installed
## you can enable inline LaTeX equations:
$wgUseTeX           = false;

## Set $wgCacheDirectory to a writable directory on the web server
## to make your wiki go slightly faster. The directory should not
## be publically accessible from the web.
#$wgCacheDirectory = "$IP/cache";

# Site language code, should be one of ./languages/Language(.*).php
$wgLanguageCode = "en";

$wgSecretKey = "a62f543403c823023d7aa2349c6ebcef34872950e7eb1c2698c4bdf359bc0304";

# Site upgrade key. Must be set to a string (default provided) to turn on the
# web installer while LocalSettings.php is in place
$wgUpgradeKey = "164cb5484bbd5d49";

## Default skin: you can change the default skin. Use the internal symbolic
## names, ie 'standard', 'nostalgia', 'cologneblue', 'monobook', 'vector':
$wgDefaultSkin = "vector";

## For attaching licensing metadata to pages, and displaying an
## appropriate copyright notice / icon. GNU Free Documentation
## License and Creative Commons licenses are supported so far.
#$wgEnableCreativeCommonsRdf = true;
$wgRightsPage = ""; # Set to the title of a wiki page that describes your license/copyright
$wgRightsUrl  = "";
$wgRightsText = "";
$wgRightsIcon = "";
# $wgRightsCode = ""; # Not yet used

# Path to the GNU diff3 utility. Used for conflict resolution.
$wgDiff3 = "/usr/bin/diff3";



# Query string length limit for ResourceLoader. You should only set this if
# your web server has a query string length limit (then set it to that limit),
# or if you have suhosin.get.max_value_length set in php.ini (then set it to
# that value)
$wgResourceLoaderMaxQueryLength = -1;


# End of automatically generated settings.
# Add more configuration options below.

$wgArticlePath = "/$1";
$wgUsePathInfo = true;
$wgPhpCli = "/opt/bitnami/php/bin/php";

# Adding smtp info for automated email notifications
$wgSMTP = array(
         'host' => 'ssl://smtp.gmail.com',
         'IDHost' => 'votingrightsbrigade.org',
         'port' => 465,
         'username' => 'ramon.perez@votingrightsbrigade.org',
         'password' => '!@QWASZX12qwaszx',
         'auth' => true
);

# Adding some MediaWiki extensions

# MobileFrontend allows mobile friendly browsing
wfLoadExtension( 'MobileFrontend' );
$wgMFAutodetectMobileView = true;

# Collections extensions allows pages to be organized into a collection
require_once "$IP/extensions/Collection/Collection.php";

# MultimediaViewer extension gives wiki users a different interface for 
# viewing full-size, or nearly full-size, images in their browser without 
# extraneous page loads or confusing interstitial pages.
# This requires the CommonsMetadata and BetaFeatures dependencies 
wfLoadExtension( 'CommonsMetadata' );
wfLoadExtension( 'BetaFeatures' );
require_once "$IP/extensions/MultimediaViewer/MultimediaViewer.php";

# Loading the VisualEditor extension.  More information about this extension
# here: blog.wikimedia.org/2012/06/21/help-us-shape-wikimedias-prototype-visual-editor/
# The parsoid service is proving brittle, so commenting out for now
#wfLoadExtension( 'VisualEditor' );

 // OPTIONAL: Enable VisualEditor in other namespaces
 // By default, VE is only enabled in NS_MAIN
# $wgVisualEditorNamespaces[] = NS_PROJECT;

 // Enable by default for everybody
# $wgDefaultUserOptions['visualeditor-enable'] = 1;

 // Don't allow users to disable it
# $wgHiddenPrefs[] = 'visualeditor-enable';

 // OPTIONAL: Enable VisualEditor's experimental code features
 //$wgVisualEditorEnableExperimentalCode = true;

# VisualEditor requires a Parsoid service, which is installed in the
# extensions folder and requires the following config setting
#$wgVirtualRestConfig['modules']['parsoid'] = array(
  // URL to the Parsoid instance - use port 8142 if you use the Debian package - the parameter 'URL' was first used but is now deprecated (string)
#  'url' => 'http://localhost:8000',
  // Parsoid "domain" (string, optional) - MediaWiki >= 1.26
#  'domain' => 'localhost',
  // Parsoid "prefix" (string, optional) - deprecated since MediaWiki 1.26, use 'domain'
#  'prefix' => 'localhost',
  // Forward cookies in the case of private wikis (string or false, optional)
#  'forwardCookies' => false,
  // request timeout in seconds (integer or null, optional)
#  'timeout' => null,
  // Parsoid HTTP proxy (string or null, optional)
#  'HTTPProxy' => null,
  // whether to parse URL as if they were meant for RESTBase (boolean or null, optional)
#  'restbaseCompat' => null,
#);

# The Parsoid service needs to speak to the Mediawiki API, so we turn that on
$wgEnableAPI = true;
$wgEnableWriteAPI = true;

# The Echo extension provides an in-wiki notification system that can be 
# used by other extensions.  Activate Echo extension.
# This extension is causing the page not to load, so comment out for now.
# wfLoadExtension( 'Echo' );

# The Nuke extension makes it possible for sysops to mass delete pages.
wfLoadExtension( 'Nuke' );

# PageTriage is an extension that aims to provide a feature-rich interface
# for triaging newly-created articles.
# require_once "$IP/extensions/PageTriage/PageTriage.php";

# The TemplateSandbox extension adds the ability to preview a page using sandboxed versions of templates, allowing for easy testing before making 
# the sandbox code live. It also works with Scribunto modules.
wfLoadExtension( 'TemplateSandbox' );

# The Babel extension adds a parser function to replace the old Babel system 
# that completely relied on templates. If an unrecognized language 
# parameter is specified, it will see if there is an existing template with 
# the name and include that.
wfLoadExtension( 'Babel' );

# The Scribunto  extension allows for embedding scripting languages in 
# MediaWiki. Currently the only supported scripting language is Lua.
require_once "$IP/extensions/Scribunto/Scribunto.php";
$wgScribuntoDefaultEngine = 'luastandalone';

# The TemplateData extension introduces a <templatedata> tag and an API which
# together allow editors to specify how templates should be invoked. This
# information is available as a nicely-formatted table for end-users, and as
# a JSON API, which enables other systems (e.g. VisualEditor) to build
# interfaces for working with templates and their parameters.
wfLoadExtension( 'TemplateData' );

# The InputBox extension adds already created HTML forms to wiki pages. 
# Users can "complete" a form (entering text, selecting menu items, etc.) 
# by entering text into the box.
wfLoadExtension( 'InputBox' );

# The TitleBlacklist extension allows wiki administrators to block the
# creation, movement and upload of pages, the title of which matches one
# or more regular expressions, as well as blocking creation of accounts
# with matching usernames.
wfLoadExtension( 'TitleBlacklist' );

# Activate skins
#wfLoadSkin( 'MinervaNeue' );
#require_once "$IP/skins/MinervaNeue/MinervaNeue.php";
#$wgDefaultSkin = 'minerva';
wfLoadSkin( 'CologneBlue' );
wfLoadSkin( 'Modern' );
wfLoadSkin( 'MonoBook' );

# The ParserFunctions extension enhances the wikitext parser with helpful
# functions, mostly related to logic and string-handling. Since MediaWiki
# 1.15, ParserFunctions has incorporated most (but not all) of the functions
# from the StringFunctions extension, which may be enabled or disabled (See
# the install instructions below).
wfLoadExtension( 'ParserFunctions' );

# Since many templates incorporate images, it is helpful to modify
# LocalSettings.php to allow instant commons import of images:
$wgUseInstantCommons = true;

# The Tooltip extension provides the ability to add fancy tooltips to wiki text.
# Unlike other extensions which provide similar functionality (i.e.
# Extension:Glossary (outdated), Extension:LinkedImage (outdated),
# Extension:LinkFloatie, etc), this extension allows for multi-line wiki
# and/or HTML syntax text for the tooltip. Additionally, the tooltip itself
# is displayed in a fancy semitransparent window. Unfortunately, this
# extension does not work in conjunction with Extension:Glossary.
require_once( "$IP/extensions/Tooltip/Tooltip.php" );
